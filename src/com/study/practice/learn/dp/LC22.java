package com.study.practice.learn.dp;

/**
 * @version 1.0
 * @Author 作者名
 * @Date 2024/4/15 15:42
 * * @注释 买卖股票II
 * <p>
 * 给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。
 * <p>
 * 在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。
 * <p>
 * 返回 你能获得的 最大 利润 。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：prices = [7,1,5,3,6,4]
 * 输出：7
 * 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
 * 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
 * 总利润为 4 + 3 = 7 。
 * 示例 2：
 * <p>
 * 输入：prices = [1,2,3,4,5]
 * 输出：4
 * 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
 * 总利润为 4 。
 * 示例 3：
 * <p>
 * 输入：prices = [7,6,4,3,1]
 * 输出：0
 * 解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= prices.length <= 3 * 104
 * 0 <= prices[i] <= 104
 */

public class LC22 {


    /**
     * 1定义一个二维数组   int [] dp=new int[][2]
     * dp[i][0] 表示第i持有这个股票
     * dp[i][1] 表示第i不持有这个股票
     * <p>
     * 2递推公式
     * <p>
     * 2.1 dp[i][0]= 前i-1天就持有了这个股票  或者在第i买入这个股票
     * dp[i][0]=Max(dp[i-1][0],dp[i-1][1]-price[i])
     * <p>
     * <p>
     * 2.2 dp[i][1] 前i-1天就不持有了  或者在第i天卖出不持有了
     * dp[i][1]=Max(dp[i-1][1],dp[i-1][0]+price[i])
     * <p>
     * 3、由上面的递推公式可以得出要初始化的值是
     * dp[0][0]=0-num[0]
     * dp[0][1]=0;
     * <p>
     * 4、返回dp[i-1][1]  在最后一定是不持有这个股票有更多的现金
     * <p>
     * <p>
     * 在买卖股票II中 可以反复购买了.相较于I 仅在
     * 2.1 dp[i][0]=Max(dp[i-1][0],dp[i-1][1]-price[i]) 这个递推公式中
     * <p>
     * 0-price[i] 变成了 dp[i-1][1]-price[i] 只能买一次股票 那么购买的时候一定是第一次购买
     * 此时手中的钱一定是0 而在II中可以反复购买了 那么当再次够买的时候 手里的本金就是前一天中 不持有股票的本金
     *
     * @param prices
     * @return
     */
    public int maxProfit(int[] prices) {

        if (prices.length == 0) return 0;
        int[][] dp = new int[prices.length][2];
        dp[0][0] = -prices[0];
        dp[0][1] = 0;
        for (int i = 1; i < prices.length; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i-1][1]-prices[i]);
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] + prices[i]);
        }

        return dp[prices.length - 1][1];

    }
}
