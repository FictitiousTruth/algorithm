package com.study.practice.learn.dp;

/**
 * @version 1.0
 * @Author 作者名
 * @Date 2024/4/12 17:44
 * @注释 给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。
 * <p>
 * 输入：n = 3
 * 输出：5
 * 示例 2：
 * <p>
 * 输入：n = 1
 * 输出：1
 * 提示：
 * <p>
 * 1 <= n <= 19
 */
public class LC96 {


    /**
     * 【二叉搜索树 左子树<root<右子树】
     * 解题思路：
     * n=0  输出1  【空二叉树也是一个二叉树】
     * n=1  输出1
     * n=2  输出2
     * <p>
     * n=3的情况
     * 输出= 以1为根节点的情况
     * 左子树为节点个数为0的情况*右子树为2的情况
     * 1*2=2
     * +
     * 以2为根节点的情况
     * 左子树为节点个数为1的情况*右子树为1的情况
     * 1*1=1
     * +
     * 以3为根节点的情况
     * 左子树为节点个数为2的情况*右子树为0的情况
     * 2*1=2
     * <p>
     * 1=<j<=n
     * 递推公式:dp[n]=dp[0]*dp[n-0]+  ......+ dp[j-1]*dp[n-j]
     * 分别让1 2 3 。。。。n作为根节点的情况
     * 此时左子树个数为 j-1
     * 右子树的数两位n-j
     * dp[j-1]*dp[n-j] 就是j作为根节点的情况
     * 初始化： dp[0] =1
     * dp[1]=1
     * dp[2]=2
     *
     * @param n
     * @return
     */
    public int numTrees(int n) {
        int[] dp = new int[n + 1];
        if (n == 0 || n == 1) return 1;
        if (n == 2) return 2;
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                dp[i] += dp[j - 1] * dp[i - j];
            }
        }
        return dp[n];
    }
}
